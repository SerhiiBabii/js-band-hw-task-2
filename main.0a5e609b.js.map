{"version":3,"sources":["src/main.js"],"names":["getTruckIdsCallback","callback","setTimeout","getTruckIds","Promise","resolve","result","getTruckByIdCallback","id","isError","Math","ceil","random","undefined","model","getTruckById","reject","succes","error","then","data","console","log","catch","countForCallbackRequest","getTruckListCallback","countForPromiseRequest","getTruckListPromise","countForAsyncAwaitRequest","getTruckListAsyncAwait"],"mappings":";AAAA,SAASA,EAAoBC,GAC3BC,WAAW,KACTD,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,MACjB,KAGL,SAASE,IACA,OAAA,IAAIC,QAASC,IAClBL,EAAoBM,GAAUD,EAAQC,MAI1C,SAASC,EAAqBC,EAAIP,GAChCC,WAAW,KAGLO,GAFYC,KAAKC,KAAmB,IAAdD,KAAKE,UAAiB,IAGvCX,OAAAA,OAASY,EAAW,kBAG7BZ,EAAS,CACPO,GAAIA,EACJM,eAAgBN,QAKtB,SAASO,EAAaP,GACb,OAAA,IAAIJ,QAAS,CAACC,EAASW,KAC5BT,EAAqBC,EAAI,CAACS,EAAQC,IACxBV,GAAMS,EAAUZ,EAAQY,GAAUD,EAAOE,MAKvDH,EAAa,IACVI,KAAKC,GAAQC,QAAQC,WAAWF,EAAKZ,cAAcY,EAAKN,UACxDS,MAAML,GAASG,QAAQC,sBAAsBJ,MAEhD,IAAIM,EAA0B,EAE9B,SAASC,EAAqBjB,EAAIP,GAChCC,WAAW,KACHO,MAAAA,EAAUC,KAAKC,KAAmB,IAAdD,KAAKE,UAAiB,IAE7CH,GAAYe,EAA0B,GACvCC,EAAqBjB,EAAIP,GACzBuB,GAA2B,GACnBf,GAAwC,IAA5Be,EACpBvB,EAASO,EAAI,mBAEbP,EAASO,GACTgB,EAA0B,KAKhCC,EAAqB,GAAI,CAACjB,EAAIU,MACxBV,GAAMU,EACVG,QAAQC,kBAAkBJ,KAE1BG,QAAQC,WAAWd,mBAAoBA,OAIzC,IAAIkB,EAAyB,EAE7B,SAASC,EAAoBnB,GACvBC,IAAAA,EAAUC,KAAKC,KAAmB,IAAdD,KAAKE,UAAiB,IAEvC,OAAA,IAAIR,QAAQ,CAACC,EAAQW,KAC1Bd,WAAW,KACNO,GAAYiB,EAAyB,GACtCA,GAA0B,EAC1BV,MAEAX,EAAQG,GACRkB,EAAyB,OAG5BP,KAAKC,IACNC,QAAQC,qBAAqBF,mBAAsBA,OAElDG,MAAM,IACFd,GAAsC,IAA3BiB,EACLC,EAAoBnB,GAEtB,IAAIJ,QAAQ,CAACC,EAASW,IAAWA,EAAOK,QAAQC,IAAI,+BAIjEK,EAAoB,IAEpB,IAAIC,EAA4B,EAEhC,eAAeC,EAAuBrB,GAChCC,IAAAA,EAAUC,KAAKC,KAAmB,IAAdD,KAAKE,UAAiB,IAmBvCN,aAjBY,IAAIF,QAAQ,CAACC,EAASW,KACvCd,WAAW,KACNO,GAAYmB,EAA4B,GACzCA,GAA6B,EAC7BZ,MAEAX,EAAQG,GACRoB,EAA4B,OAG/BT,KAAKC,GAAQA,GACbG,MAAOL,GACHT,GAAyC,IAA9BmB,EACLC,EAAuBrB,GAEzB,IAAIJ,QAAQ,CAACC,EAASW,IAAWA,EAAOE,KAKrDW,EAAuB,KACpBV,KAAKC,IACJC,QAAQC,WAAWF,aAAgBA,OAEpCG,MAAM,IAAMF,QAAQC,IAAI","file":"main.0a5e609b.js","sourceRoot":"..","sourcesContent":["function getTruckIdsCallback(callback) {\r\n  setTimeout(() => {\r\n    callback([1,2,5,9,67]);\r\n  }, 1000)\r\n}\r\n\r\nfunction getTruckIds() {\r\n  return new Promise((resolve => {\r\n    getTruckIdsCallback(result => resolve(result));\r\n  }))\r\n}\r\n\r\nfunction getTruckByIdCallback(id, callback) {\r\n  setTimeout(() => {\r\n    const isError = Math.ceil(Math.random()*1000) < 100;\r\n\r\n    if (isError) {\r\n      return callback(undefined, 'Internal error'); \r\n    }\r\n\r\n    callback({\r\n      id: id,\r\n      model: `truck ${id}`\r\n    });\r\n  })  \r\n}\r\n\r\nfunction getTruckById(id) {\r\n  return new Promise ((resolve, reject) => {\r\n    getTruckByIdCallback(id, (succes, error) => {\r\n      return (id && succes) ? resolve(succes) : reject(error);\r\n    })\r\n  })\r\n}\r\n\r\ngetTruckById(36)\r\n  .then(data => console.log(`id: ${data.id}, model: ${data.model}`))\r\n  .catch(error => console.log(`getTruckById - ${error}`));\r\n\r\nlet countForCallbackRequest = 0;\r\n\r\nfunction getTruckListCallback(id, callback) {\r\n  setTimeout(() => {\r\n    const isError = Math.ceil(Math.random()*1000) < 100;\r\n    \r\n    if(isError && (countForCallbackRequest < 1)) {\r\n      getTruckListCallback(id, callback);\r\n      countForCallbackRequest += 1;\r\n    } else if(isError && (countForCallbackRequest === 1)) {\r\n      callback(id, 'Internal error');\r\n    } else {\r\n      callback(id);\r\n      countForCallbackRequest = 0;\r\n    }\r\n  });\r\n}\r\n\r\ngetTruckListCallback(57, (id, error) => {\r\n  if(!id || error) {\r\n  console.log(`Callback - ${error}`)\r\n  } else {\r\n  console.log(`id: ${id}, model: truck ${id}`)\r\n  }\r\n});\r\n\r\nlet countForPromiseRequest = 0;\r\n\r\nfunction getTruckListPromise(id) {\r\n  let isError = Math.ceil(Math.random()*1000) < 100;\r\n\r\n  return new Promise((resolve,reject) => {\r\n    setTimeout(() => {\r\n      if(isError && (countForPromiseRequest < 1)) {\r\n        countForPromiseRequest += 1;\r\n        reject();\r\n      } else {\r\n        resolve(id);\r\n        countForPromiseRequest = 0;\r\n      }\r\n    });\r\n  }).then(data => {\r\n    console.log(`Promise - id: ${data}, model: truck ${data}`)\r\n  })\r\n    .catch(() => {\r\n      if(isError && countForPromiseRequest === 1) {\r\n        return getTruckListPromise(id);\r\n      }\r\n      return new Promise((resolve, reject) => reject(console.log('Promise - Internal error')));\r\n    })\r\n}\r\n\r\ngetTruckListPromise(92);\r\n\r\nlet countForAsyncAwaitRequest = 0;\r\n\r\nasync function getTruckListAsyncAwait(id) {\r\n  let isError = Math.ceil(Math.random()*1000) < 100;\r\n\r\n  let result = await new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if(isError && (countForAsyncAwaitRequest < 1)) {\r\n        countForAsyncAwaitRequest += 1;\r\n        reject();\r\n      } else {\r\n        resolve(id);\r\n        countForAsyncAwaitRequest = 0;\r\n      }\r\n    })\r\n  }).then(data => data)\r\n    .catch((error) => {\r\n      if(isError && countForAsyncAwaitRequest === 2) {\r\n        return getTruckListAsyncAwait(id);\r\n      }\r\n      return new Promise((resolve, reject) => reject(error));\r\n    });\r\n  return result;\r\n}\r\n\r\ngetTruckListAsyncAwait(120)\r\n  .then(data => {\r\n    console.log(`id: ${data}, model: ${data}`)\r\n  })\r\n  .catch(() => console.log('AsynAwait - Internal error'));\r\n"]}